/* DAGMAWI NEGUSSIE
computer science and engineering student
ETHIOPIA
21dagmawinegussie@gmail.com*/


-- Create the Hotel table
CREATE TABLE Hotel (
  hotel_id INT PRIMARY KEY,
  hotel_name VARCHAR(100),
  place VARCHAR(100),
  phone_number VARCHAR(20)
);

-- Create the Room table
CREATE TABLE Room (
  room_id INT PRIMARY KEY,
  hotel_id INT,
  room_type VARCHAR(50),
  price_per_night DECIMAL(10, 2),
  available VARCHAR(20),
  FOREIGN KEY (hotel_id) REFERENCES Hotel(hotel_id)
);

-- Create the Reservable_table table
CREATE TABLE Reservable_table (
  reservable_table_id INT PRIMARY KEY,
  table_number INT,
  floor_number INT
);

-- Create the Guest table
CREATE TABLE Guest (
  guest_id INT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  sex VARCHAR(10),
  address VARCHAR(100),
  phone_number VARCHAR(20) UNIQUE
);

-- Create the Reservation table
CREATE TABLE Reservation (
  reservation_id INT PRIMARY KEY,
  guest_id INT,
  room_id INT,
  reservable_table_id INT,
  checkin_date DATE,
  checkout_date DATE,
  _status VARCHAR(100) NOT NULL DEFAULT 'Confirmed',
  special_requirements VARCHAR(100),
  FOREIGN KEY (guest_id) REFERENCES Guest(guest_id),
  FOREIGN KEY (room_id) REFERENCES Room(room_id),
  FOREIGN KEY (reservable_table_id) REFERENCES Reservable_table(reservable_table_id)
);

-- Create the CheckIn table
CREATE TABLE CheckIn (
  checkin_id INT IDENTITY(1,1) PRIMARY KEY,
  reservation_id INT,
  checkin_date DATETIME,
  room_key VARCHAR(50),
  FOREIGN KEY (reservation_id) REFERENCES Reservation(reservation_id)
);

-- Create the BestFoodDrink table
CREATE TABLE BestFoodDrink (
  item_id INT PRIMARY KEY,
  item_name VARCHAR(100),
  price DECIMAL(10, 2)
);

-- Create the Order table
CREATE TABLE O_rder (
  order_id INT PRIMARY KEY,
  guest_id INT,
  item_id INT,
  quantity INT,
  FOREIGN KEY (guest_id) REFERENCES Guest(guest_id),
  FOREIGN KEY (item_id) REFERENCES BestFoodDrink(item_id)
);

-- Create the CheckOut table
CREATE TABLE CheckOut (
  checkout_id INT PRIMARY KEY,
  reservation_id INT,
  order_id INT,
  checkout_date DATETIME,
  total_cost DECIMAL(10, 2),
  payment_status VARCHAR(20),
  checkout_status VARCHAR(20) NOT NULL DEFAULT 'pending',
  FOREIGN KEY (reservation_id) REFERENCES Reservation(reservation_id),
  FOREIGN KEY (order_id) REFERENCES O_rder(order_id)
);

-- Add the reservation_id column to the Room table
ALTER TABLE Room
ADD reservation_id INT;

ALTER TABLE Room
ADD CONSTRAINT fk_constraint_Room
FOREIGN KEY (reservation_id)
REFERENCES Reservation (reservation_id);

 -- Insert sample data into the Hotel table
INSERT INTO Hotel
VALUES (1, 'Hotel A', 'City A', '1234567890'),
       (2, 'Hotel B', 'City B', '9876543210');

-- Insert sample data into the Room table
INSERT INTO Room (room_id, hotel_id, room_type, price_per_night, available)
VALUES (101, 1, 'Standard', 100.00, 'AVAILABLE'),
       (102, 1, 'Deluxe', 150.00, 'AVAILABLE'),
       (201, 2, 'Standard', 120.00, 'AVAILABLE');

-- Insert sample data into the Reservable_table table
INSERT INTO Reservable_table (reservable_table_id, table_number, floor_number)
VALUES (1, 1, 1),
       (2, 2, 1),
       (3, 3, 2);

-- Insert sample data into the BestFoodDrink table
INSERT INTO BestFoodDrink (item_id, item_name, price)
VALUES (1, 'Burger', 10.99),
       (2, 'Pizza', 12.99),
       (3, 'Cola', 2.99);
---------------------------------------------------------------------
CREATE VIEW AvailableRoomsView AS
SELECT Room.room_id, Hotel.hotel_name, Room.room_type, Room.price_per_night
FROM Room
JOIN Hotel ON Room.hotel_id = Hotel.hotel_id
WHERE Room.available = 'AVAILABLE';
BEGIN TRANSACTION;
/*This view can be used to retrieve information about available rooms. 
It can be helpful for displaying room availability to customers or for internal use*/

--After creating the view, you can query it just like a regular table to retrieve the rooms' information:
SELECT *
FROM AvailableRoomsView;
----------------------



-- Step 1: Insert guest details
INSERT INTO Guest (guest_id, first_name, last_name, sex, phone_number)
VALUES (1, 'John', 'Doe', 'Male', '1234567890');

-- Step 2: Check room availability
DECLARE @room_id INT;
SET @room_id = (
  SELECT TOP 1 room_id
  FROM Room
  WHERE available = 'AVAILABLE'
  -- Additional criteria can be added here based on guest preferences and desired dates
  ORDER BY room_id
);

IF @room_id IS NULL
BEGIN
  -- Rollback the transaction and exit if no suitable room is available
  ROLLBACK;
  SELECT 'No available rooms matching the criteria' AS Result;
  RETURN;
END;

-- Step 3: Generate reservation ID
DECLARE @reservation_id INT;
SET @reservation_id = (
  SELECT ISNULL(MAX(reservation_id), 0) + 1
  FROM Reservation
);

-- Step 4: Insert reservation details
INSERT INTO Reservation (reservation_id, guest_id, room_id, checkin_date, checkout_date)
VALUES (@reservation_id, 1, @room_id, GETDATE(), '2023-09-24');

-- Step 5: Record check-in time and assign room key
DECLARE @checkin_date DATETIME;
SET @checkin_date = GETDATE();

INSERT INTO CheckIn (reservation_id, checkin_date, room_key)
VALUES (@reservation_id, @checkin_date, 'RoomKey123');

-- Step 6: Update room availability
UPDATE Room
SET available = 'OCCUPIED'
WHERE room_id = @room_id;

-- Commit the transaction
COMMIT;



--This query a guest's information, including their name, room details, check-in date, 
and other information, using their ID in the hotel
CREATE PROCEDURE GetGuestInformationByID
    @guestId INT
AS
BEGIN
    SELECT Hotel.hotel_name, Guest.first_name, Guest.last_name, Room.room_id, Room.room_type, CheckIn.checkin_date, 
    FROM Guest
    JOIN Reservation ON Guest.guest_id = Reservation.guest_id
    JOIN Room ON Reservation.room_id = Room.room_id
    JOIN CheckIn ON Reservation.reservation_id = CheckIn.reservation_id
    JOIN Hotel ON Room.hotel_id = Hotel.hotel_id
    WHERE Guest.guest_id = @guestId;
END;
---------------
--To execute the stored procedure and retrieve the guest's information, you can use the EXEC keyword
--Replace 123 with the actual guest ID you want to retrieve information for
EXEC GetGuestInformationByID @guestId = 123;
-------------------------------------------------------------------------------------




begin transaction;
--for ordering drinks and food--
DECLARE @order_id INT;
SET @order_id = (
SELECT ISNULL(MAX(order_id), 0) + 1
FROM O_rder
);

INSERT INTO O_rder (order_id, guest_id, item_id, quantity)
VALUES
(1, 1, 1, 2), -- Guest 1 orders 2 items with item_id = 1
(2, 1, 2, 1), -- Guest 1 orders 1 item with item_id = 2
(3, 1, 3, 3); -- Guest 1 orders 3 items with item_id = 3
commit;



begin transaction;
----cheking out---
--step 1--
DECLARE @guest_id INT;
SET @guest_id = 1; -- Specify the guest ID provided by the user

DECLARE @reservation_id INT;
SET @reservation_id = (
  SELECT reservation_id
  FROM Reservation
  WHERE guest_id = @guest_id
);
-- Step 2: Calculate total ordered items cost
DECLARE @room_price DECIMAL(10, 2);
SET @room_price = (
  SELECT price_per_night
  FROM Room
  WHERE room_id = (
    SELECT room_id
    FROM Reservation
    WHERE reservation_id = @reservation_id
  )
);

DECLARE @checkin_date DATE;
DECLARE @checkout_date DATE;
SET @checkin_date = (
  SELECT checkin_date
  FROM Reservation
  WHERE reservation_id = @reservation_id
);

SET @checkout_date = (
  SELECT checkout_date
  FROM Reservation
  WHERE reservation_id = @reservation_id
);

DECLARE @total_room_cost DECIMAL(10, 2);
SET @total_room_cost = DATEDIFF(DAY, @checkin_date, @checkout_date) * @room_price;
/*The DATEDIFF function in SQL Server calculates the difference between two dates in the specified date part*/

-- Calculate total ordered items cost
-- Step 3: Calculate total ordered items cost
DECLARE @total_ordered_items_cost DECIMAL(10, 2);
SET @total_ordered_items_cost = ISNULL((
  SELECT SUM(quantity * price)
  FROM O_rder
  JOIN BestFoodDrink ON O_rder.item_id = BestFoodDrink.item_id
  WHERE O_rder.guest_id = @guest_id
), 0);

-- step 4 Calculate total cost
DECLARE @total_cost DECIMAL(10, 2);
SET @total_cost = ISNULL(@total_room_cost, 0) + ISNULL(@total_ordered_items_cost, 0);

-- Update checkout details
DECLARE @checkout_id INT;
SET @checkout_id = (
  SELECT ISNULL(MAX(checkout_id), 0) + 1
  FROM CheckOut
);

INSERT INTO CheckOut (checkout_id, reservation_id, checkout_date, total_cost)
VALUES (@checkout_id, @reservation_id, GETDATE(), @total_cost);



-- Update room availability
DECLARE @room INT;
SET @room = (
  SELECT room_id
  FROM Reservation
  WHERE reservation_id = @reservation_id
);

UPDATE Room
SET available = 'AVAILABLE'
WHERE room_id = @room;

-- Update rreservation status
UPDATE Reservation
SET _status = 'Checked out'
WHERE reservation_id = @reservation_id;

-- Update checkout's payment status if the coustomer pays the prices
UPDATE CheckOut
SET payment_status = 'paid'
WHERE reservation_id =  @reservation_id;
UPDATE CheckOut
SET checkout_status = 'checked out'
WHERE reservation_id =  @reservation_id;

-- Joining the Guest, Reservation, Room, and CheckOut tables to retrieve the required information
SELECT
  Guest.first_name,
  Guest.last_name,
  CheckOut.total_cost,
  CheckOut.payment_status,
  CheckOut.checkout_status,
  CheckOut.checkout_date
FROM
  Guest
  JOIN Reservation ON Guest.guest_id = Reservation.guest_id
  JOIN Room ON Reservation.room_id = Room.room_id
  JOIN CheckOut ON Reservation.reservation_id = CheckOut.reservation_id
WHERE
 Guest.guest_id = 1;




 ----------------permissions, roles, and logins for manager, employee, and customer:---------------------
 -- Create a login for the hotel manager
CREATE LOGIN henok WITH PASSWORD = '123';

-- Create a login for the hotel employee
CREATE LOGIN kal WITH PASSWORD = '456';

-- Create a login for the customer
CREATE LOGIN dagi WITH PASSWORD = '789';

----------------------------Create Users and Assign Roles:--------------
-- Create the role
CREATE ROLE ManagerRole; -- 1st step
CREATE ROLE EmployeeRole; 
CREATE ROLE CustomerRole;
-- Create users
CREATE USER dagi;
CREATE USER henok;
CREATE USER kal;


-------------------------------Grant Permissions for Manager:----------
-- Grant permissions to the Hotel table
GRANT SELECT, INSERT, UPDATE, DELETE ON Hotel TO ManagerRole;

-- Grant permissions to the Room table
GRANT SELECT, INSERT, UPDATE, DELETE ON Room TO ManagerRole;

-- Grant permissions to the Reservable_table table
GRANT SELECT, INSERT, UPDATE, DELETE ON Reservable_table TO ManagerRole;

-- Grant permissions to the Guest table
GRANT SELECT, INSERT, UPDATE, DELETE ON Guest TO ManagerRole;

-- Grant permissions to the Reservation table
GRANT SELECT, INSERT, UPDATE, DELETE ON Reservation TO ManagerRole;

-- Grant permissions to the CheckIn table
GRANT SELECT, INSERT, UPDATE, DELETE ON CheckIn TO ManagerRole;

-- Grant permissions to the BestFoodDrink table
GRANT SELECT, INSERT, UPDATE, DELETE ON BestFoodDrink TO ManagerRole;

-- Grant permissions to the Order table
GRANT SELECT, INSERT, UPDATE, DELETE ON o_rder TO ManagerRole;

-- Grant permissions to the CheckOut table
GRANT SELECT, INSERT, UPDATE, DELETE ON CheckOut TO ManagerRole;

-------------------------------Grant Permissions for Employee:---------------------------------
-- Grant permissions to the Room table
GRANT SELECT, UPDATE ON Room TO EmployeeRole;

-- Grant permissions to the Guest table
GRANT SELECT, INSERT, UPDATE ON Guest TO EmployeeRole;

-- Grant permissions to the BestFoodDrink table
GRANT SELECT ON BestFoodDrink TO EmployeeRole;

-- Grant permissions to the CheckIn table
GRANT SELECT, INSERT, UPDATE, DELETE ON CheckIn TO EmployeeRole;

-- Grant permissions to the Order table
GRANT SELECT, INSERT, UPDATE ON o_rder TO EmployeeRole;

-- Grant permissions to the CheckOut table
GRANT SELECT, INSERT, UPDATE ON CheckOut TO EmployeeRole;

-------------------------------------Grant Permissions for Customer:--------------------------------
-- Grant permissions to the Guest table
GRANT SELECT, INSERT, UPDATE ON Guest TO CustomerRole;

-- Grant permissions to the Reservation table
GRANT SELECT, INSERT, UPDATE ON Reservation TO CustomerRole;

-- Grant permissions to the BestFoodDrink table
GRANT SELECT ON BestFoodDrink TO CustomerRole;

-- Grant permissions to the Order table
GRANT SELECT, INSERT ON o_rder TO CustomerRole;

-- Grant permissions to the CheckOut table
GRANT SELECT, UPDATE ON CheckOut TO CustomerRole;


-- Assign roles to the users
ALTER ROLE ManagerRole ADD MEMBER dagi;
ALTER ROLE EmployeeRole ADD MEMBER henok;
ALTER ROLE CustomerRole ADD MEMBER kal;







